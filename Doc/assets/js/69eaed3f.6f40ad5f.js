"use strict";(self.webpackChunkmodio_docs=self.webpackChunkmodio_docs||[]).push([[3902],{51654:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>d,toc:()=>a});var t=o(74848),i=o(28453);const r={id:"ue-android-configuration",title:"Android Configuration",slug:"/unreal/android-configuration/",custom_edit_url:"https://github.com/modio/modio-ue4-internal/blob/develop/Plugins/Modio/Doc/doc_root/en-us/android/android-configuration.mdx"},l=void 0,d={id:"android/ue-android-configuration",title:"Android Configuration",description:"Single Sign-On (5.4 onwards)",source:"@site/public/en-us/android/android-configuration.mdx",sourceDirName:"android",slug:"/unreal/android-configuration/",permalink:"/unreal/android-configuration/",draft:!1,unlisted:!1,editUrl:"https://github.com/modio/modio-ue4-internal/blob/develop/Plugins/Modio/Doc/doc_root/en-us/android/android-configuration.mdx",tags:[],version:"current",frontMatter:{id:"ue-android-configuration",title:"Android Configuration",slug:"/unreal/android-configuration/",custom_edit_url:"https://github.com/modio/modio-ue4-internal/blob/develop/Plugins/Modio/Doc/doc_root/en-us/android/android-configuration.mdx"},sidebar:"sidebar",previous:{title:"Profiling",permalink:"/unreal/profiling/"},next:{title:"Meta Quest Configuration",permalink:"/unreal/meta-configuration/"}},s={},a=[{value:"Single Sign-On (5.4 onwards)",id:"single-sign-on-54-onwards",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Getting the Token",id:"getting-the-token",level:3},{value:"Single Sign-On (Pre-5.4)",id:"single-sign-on-pre-54",level:2},{value:"Configuration",id:"configuration-1",level:3},{value:"Getting the Token",id:"getting-the-token-1",level:3}];function u(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"single-sign-on-54-onwards",children:"Single Sign-On (5.4 onwards)"}),"\n",(0,t.jsx)(n.p,{children:"As of UE5.4, there is better support for obtaining an IdToken for Google Authentication. However there are still some changes that need to be made."}),"\n",(0,t.jsxs)(n.p,{children:["If you are on a Source build, open ",(0,t.jsx)(n.code,{children:"Engine\\Plugins\\Online\\OnlineSubsystemGoogle\\OnlineSubsystemGoogle.uplugin"})," and add Android to the ",(0,t.jsx)(n.code,{children:"PlatformAllowList"})," array. If you are on a Launcher build, you can simply copy this plugin from this directory into your projects Plugins directory and make the appropriate change."]}),"\n",(0,t.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Next, update your AndroidEngine.ini file to contain the following:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'[OnlineSubsystem]\nDefaultPlatformService=GooglePlay\nNativePlatformService=Google\n\n[OnlineSubsystemGoogle]\nbEnabled=True\nClientId=your-client-id-here\nServerClientId=your-server-client-id-here\n\n\n[OnlineSubsystemGoogle.OnlineIdentityGoogle]\n+ScopeFields="email"\n+ScopeFields="profile"\n+ScopeFields="https://www.googleapis.com/auth/userinfo.email"\n+ScopeFields="https://www.googleapis.com/auth/userinfo.profile"\nbRequestIdToken=true\nbRequestOfflineAccess=true\n'})}),"\n",(0,t.jsx)(n.p,{children:"This will ensure that you are using OnlineSubsystemGoogle as the native platform OSS in order to perform SSO."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"bRequestIdToken"})," will request an IdToken that you can pass to mod.io's authentication service. ",(0,t.jsx)(n.code,{children:"bRequestOfflineAccess"})," will request a server-side token that can be used as an alternative to the IdToken."]}),"\n",(0,t.jsx)(n.p,{children:"Ensure that you replace the ClientId and ServerClientId with your client IDs from Google Cloud Console. The ClientId should be the Android OAuth Credential that you have linked to your title in Google Play Console. ServerClientId should be the Web Application OAuth Credential that you configured."}),"\n",(0,t.jsx)(n.h3,{id:"getting-the-token",children:"Getting the Token"}),"\n",(0,t.jsx)(n.p,{children:"Once you have configured the above options, you should be able to obtain either an IdToken or ServerAuthCode that you can use with mod.io authentication."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"const IOnlineSubsystem* OnlineSubsystem = IOnlineSubsystem::GetByPlatform();\nconst IOnlineIdentityPtr OnlineIdentity = OnlineSubsystem->GetIdentityInterface();\n\nOnlineIdentity->AddOnLoginCompleteDelegate_Handle(0, NativeLoginComplete);\nOnlineIdentity->Login(0, FOnlineAccountCredentials());\n\n// In the NativeLoginComplete delegate, however you set it up, if it was a successful login, you can then obtain the Server Auth Token as follows:\nFString IdToken, ServerAuthToken;\n\nUserAccount.Get()->GetAuthAttribute(AUTH_ATTR_ID_TOKEN, IdToken);\nUserAccount.Get()->GetAuthAttribute(AUTH_ATTR_AUTHORIZATION_CODE, ServerAuthToken);\n\n// Now perform Auth to the mod.io service\nAuthParams.AuthToken = ServerAuthToken;\nAuthParams.bUserHasAcceptedTerms = true;\n            \n// Alternatively you could set AuthParams.AuthToken = IdToken and use EModioAuthenticationProvider::GoogleIDToken\nModioSubsystem->AuthenticateUserExternalAsync(AuthParams, EModioAuthenticationProvider::GoogleServerSideToken, FOnErrorOnlyDelegateFast::CreateUObject(this, OnAuthenticationComplete));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"single-sign-on-pre-54",children:"Single Sign-On (Pre-5.4)"}),"\n",(0,t.jsx)(n.p,{children:"For Unreal Engine versions before 5.4, you need to make some engine-level modifications in order for Android SSO to work. You must be using a source build rather than an engine build."}),"\n",(0,t.jsxs)(n.p,{children:["Open ",(0,t.jsx)(n.code,{children:"Engine\\Plugins\\Online\\OnlineSubsystemGoogle\\Source\\ThirdParty\\Android\\Java\\GoogleLogin.java"})," and change the ",(0,t.jsx)(n.code,{children:"init"})," method to uncomment ",(0,t.jsx)(n.code,{children:".requestServerAuthCode(serverClientId)"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Change the ",(0,t.jsx)(n.code,{children:"getAuthTokenJsonStr"})," method to the following:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'private String getAuthTokenJsonStr(GoogleSignInAccount acct)\n{\n  if (acct != null)\n  {\n    return "{\\"access_token\\":\\""+ acct.getServerAuthCode() +  "\\"," +\n        "\\"refresh_token\\":\\"androidInternal\\"," +\n        "\\"id_token\\":\\""+ acct.getIdToken() + "\\"}";\n  }\n  return "";\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Finally, Open OnlineSubsystemGoogle.uplugin and add Android to the ",(0,t.jsx)(n.code,{children:"PlatformAllowList"})," array."]}),"\n",(0,t.jsx)(n.h3,{id:"configuration-1",children:"Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Once you have made the above changes, update your AndroidEngine.ini to contain the following:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'[OnlineSubsystem]\nDefaultPlatformService=GooglePlay\nNativePlatformService=Google\n\n[OnlineSubsystemGoogle]\nbEnabled=True\nClientId=your-client-id-here\nServerClientId=your-server-client-id-here\n\n[OnlineSubsystemGoogle.OnlineIdentityGoogle]\n+ScopeFields="email"\n+ScopeFields="profile"\n+ScopeFields="https://www.googleapis.com/auth/userinfo.email"\n+ScopeFields="https://www.googleapis.com/auth/userinfo.profile"\n'})}),"\n",(0,t.jsx)(n.p,{children:"This will ensure that you are using OnlineSubsystemGoogle as the native platform OSS in order to perform SSO."}),"\n",(0,t.jsx)(n.p,{children:"Ensure that you replace the ClientId and ServerClientId with your client IDs from Google Cloud Console. The ClientId should be the Android OAuth Credential that you have linked to your title in Google Play Console. ServerClientId should be the Web Application OAuth Credential that you configured."}),"\n",(0,t.jsx)(n.h3,{id:"getting-the-token-1",children:"Getting the Token"}),"\n",(0,t.jsx)(n.p,{children:"Once you have configured the above options, you should be able to obtain a server side token that you can use for auth with mod.io."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"const IOnlineSubsystem* OnlineSubsystem = IOnlineSubsystem::GetByPlatform();\nconst IOnlineIdentityPtr OnlineIdentity = OnlineSubsystem->GetIdentityInterface();\n\nOnlineIdentity->AddOnLoginCompleteDelegate_Handle(0, NativeLoginComplete);\nOnlineIdentity->Login(0, FOnlineAccountCredentials());\n\n// In the NativeLoginComplete delegate, however you set it up, if it was a successful login, you can then obtain the Server Auth Token as follows:\nconst FString PlatformToken = OnlineIdentity->GetAuthToken(0);\n\n// Now perform Auth to the mod.io service\nAuthParams.AuthToken = PlatformToken;\nAuthParams.bUserHasAcceptedTerms = true;\n            \nModioSubsystem->AuthenticateUserExternalAsync(AuthParams, EModioAuthenticationProvider::GoogleServerSideToken, FOnErrorOnlyDelegateFast::CreateUObject(this, OnAuthenticationComplete));\n"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>d});var t=o(96540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);