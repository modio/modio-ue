"use strict";(self.webpackChunkmodio_docs=self.webpackChunkmodio_docs||[]).push([[4101],{97949:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var s=t(74848),o=t(28453),a=t(27064),i=t(89236);const r={id:"ue-mod-subscriptions",title:"Mod Subscriptions & Management",slug:"/unreal/getting-started/mod-subscriptions",custom_edit_url:"https://github.com/modio/modio-ue4-internal/blob/develop/Plugins/Modio/Doc/doc_root/en-us/getting-started/mod-subscriptions.mdx"},d=void 0,l={id:"getting-started/ue-mod-subscriptions",title:"Mod Subscriptions & Management",description:"So you\u2019ve shown the user some mods, and they've picked one they\u2019d like to install. How do you begin the installation process? Once the mod is installed, how do you know what files to load into memory?",source:"@site/public/en-us/getting-started/subscriptions.mdx",sourceDirName:"getting-started",slug:"/unreal/getting-started/mod-subscriptions",permalink:"/unreal/getting-started/mod-subscriptions",draft:!1,unlisted:!1,editUrl:"https://github.com/modio/modio-ue4-internal/blob/develop/Plugins/Modio/Doc/doc_root/en-us/getting-started/mod-subscriptions.mdx",tags:[],version:"current",frontMatter:{id:"ue-mod-subscriptions",title:"Mod Subscriptions & Management",slug:"/unreal/getting-started/mod-subscriptions",custom_edit_url:"https://github.com/modio/modio-ue4-internal/blob/develop/Plugins/Modio/Doc/doc_root/en-us/getting-started/mod-subscriptions.mdx"},sidebar:"sidebar",previous:{title:"Browsing Mods",permalink:"/unreal/getting-started/browsing-mods"},next:{title:"In-Game Mod Submission",permalink:"/unreal/getting-started/submit-mods"}},c={},u=[{value:"Mod subscriptions",id:"mod-subscriptions",level:2},{value:"External subscription changes",id:"external-subscription-changes",level:2},{value:"Checking the user subscription list",id:"checking-the-user-subscription-list",level:2},{value:"Installation management",id:"installation-management",level:2},{value:"Retrieving mod directory paths for loading",id:"retrieving-mod-directory-paths-for-loading",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["So you\u2019ve ",(0,s.jsx)(n.a,{href:"browsing-mods",children:"shown the user some mods"}),", and they've picked one they\u2019d like to install. How do you begin the installation process? Once the mod is installed, how do you know what files to load into memory?"]}),"\n",(0,s.jsx)(n.h2,{id:"mod-subscriptions",children:"Mod subscriptions"}),"\n",(0,s.jsxs)(n.p,{children:["Users indicate they want to install a mod by ",(0,s.jsx)(n.strong,{children:"subscribing"})," to it. Subscriptions are stored on the mod.io servers and are associated with a user\u2019s mod.io account, so subscribed mods for a given game will be installed to all devices where a user logs into mod.io for that game.  Similarly, when a user ",(0,s.jsx)(n.strong,{children:"unsubscribes"})," from a mod, that mod will be uninstalled from every device they\u2019re logged into mod.io with for that game."]}),"\n",(0,s.jsxs)(n.p,{children:["Subscriptions are managed with calls to either ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#subscribetomodasync",children:(0,s.jsx)(n.code,{children:"SubscribeToModAsync"})})," or ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#unsubscribefrommodasync",children:(0,s.jsx)(n.code,{children:"UnsubscribeFromModAsync"})})," containing the desired ",(0,s.jsx)(n.code,{children:"ModioModID"})," and a delegate to receive the status of the request."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["To subscribe or unsubscribe from a mod, ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#enablemodmanagement",children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"EnableModManagement"})})})," ",(0,s.jsx)(n.em,{children:"must"})," be called beforehand."]})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"SubscribeToModAsync"})," also takes a bool indicating whether or not to to subscribe to any and all dependencies for the given ",(0,s.jsx)(n.code,{children:"ModioModID"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["When dependencies are included in the ",(0,s.jsx)(n.code,{children:"SubscribeToModAsync"})," call, they will ",(0,s.jsx)(n.em,{children:"not"})," download automatically. ",(0,s.jsxs)(n.strong,{children:["Only the primary mod specified by ",(0,s.jsx)(n.code,{children:"ModioModID"})," will download automatically."]}),"  To download all subscribed content including dependencies, call ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#fetchexternalupdatesasync",children:(0,s.jsx)(n.code,{children:"FetchExternalUpdatesAsync"})})," after ",(0,s.jsx)(n.code,{children:"SubscribeToModAsync"})," successfully completes."]})}),"\n",(0,s.jsxs)(a.A,{"group-id":"languages",children:[(0,s.jsxs)(i.A,{value:"blueprint",label:"Blueprint",children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"subscribe_to_mod",src:t(84272).A+"",width:"898",height:"550"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"unsubscribe_from_mod",src:t(66738).A+"",width:"943",height:"547"})})]}),(0,s.jsx)(i.A,{value:"c++",label:"C++",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void UModioManagerSubsystem::SubscribeToMod(FModioModID ModToSubscribeTo, bool IncludeDependencies)\n{\n   if (UModioSubsystem* Subsystem = GEngine->GetEngineSubsystem<UModioSubsystem>())\n   {\n   \tSubsystem->SubscribeToModAsync(ModId, IncludeDependencies, FOnErrorOnlyDelegateFast::CreateUObject(this, &UModioManagerSubsystem::OnSubscribeToModComplete, ModId));\n   }\n}\n\nvoid UModioManagerSubsystem::OnSubscribeToModComplete(FModioErrorCode ErrorCode, FModioModID ModId)\n{\n   if (!ErrorCode)\n   {\n   \t// Indicate success to your user. This ModId's files will begin installing.\n   \t// Call FetchExternalUpdatesAsync if dependencies were included \n   }\n}\n\nvoid UModioManagerSubsystem::UnsubscribeFromMod(FModioModID ModId)\n{\n   if (UModioSubsystem* Subsystem = GEngine->GetEngineSubsystem<UModioSubsystem>())\n   {\n   \tSubsystem->UnsubscribeFromModAsync(ModId, FOnErrorOnlyDelegateFast::CreateUObject(this, &UModioManagerSubsystem::OnUnsubscribeFromModComplete, ModId));\n   }\n}\n\nvoid UModioManagerSubsystem::OnUnsubscribeFromModComplete(FModioErrorCode ErrorCode, FModioModId ModId)\n{\n   if (!ErrorCode)\n   {\n   \t// Indicate success to your user. This ModID's files will begin uninstalling.\n   }\n}\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"external-subscription-changes",children:"External subscription changes"}),"\n",(0,s.jsx)(n.p,{children:"Because mod.io's services are available via our website, users can manage their subscriptions outside of your application. This means that we need to be able to query the server for any external subscription changes."}),"\n",(0,s.jsxs)(n.p,{children:["Call ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#fetchexternalupdatesasync",children:(0,s.jsx)(n.code,{children:"FetchExternalUpdatesAsync"})})," to synchronise the server state with the plugin\u2019s local subscriptions.  Any required installations or uninstallations based on the updated user subscriptions will be processed automatically."]}),"\n",(0,s.jsxs)(a.A,{"group-id":"languages",children:[(0,s.jsx)(i.A,{value:"blueprint",label:"Blueprint",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"fetch_external_updates",src:t(34796).A+"",width:"737",height:"364"})})}),(0,s.jsx)(i.A,{value:"c++",label:"C++",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"\nvoid UModioManagerSubsystem::FetchExternalUpdates()\n{\n   if (UModioSubsystem* Subsystem = GEngine->GetEngineSubsystem<UModioSubsystem>())\n   {\n   \tSubsystem->FetchExternalUpdatesAsync(FOnErrorOnlyDelegateFast::CreateUObject(this, &UModioManagerSubsystem::OnFetchExternalUpdatesComplete));\n   }\n}\n\nvoid UModioManagerSubsystem::OnFetchExternalUpdatesComplete(FModioErrorCode ErrorCode)\n{\n   // error handling etc.\n}\n\n"})})})]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["Call ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#fetchexternalupdatesasync",children:(0,s.jsx)(n.code,{children:"FetchExternalUpdatesAsync"})})," sparingly, only when required to ensure that the local state is up-to-date such as on game start-up or based on user input (i.e. as a button on your UI). It should ",(0,s.jsx)(n.strong,{children:"NOT"})," be called on tick."]})}),"\n",(0,s.jsx)(n.h2,{id:"checking-the-user-subscription-list",children:"Checking the user subscription list"}),"\n",(0,s.jsxs)(n.p,{children:["To see which mods the user has subscribed to, call ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#query-user-subscriptions",children:(0,s.jsx)(n.code,{children:"QueryUserSubscriptions"})}),".  This retrieves a ",(0,s.jsx)(n.code,{children:"TMap"})," of ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#modiomodcollectionentry",children:(0,s.jsx)(n.code,{children:"ModioModCollectionEntry"})})," objects, one for each subscribed mod. Each ",(0,s.jsx)(n.code,{children:"ModioModCollectionEntry"})," object contains the mod\u2019s state, profile information, ID and more."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This collection includes mods that are still in the process of being installed! Make sure to check the result of ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#get-mod-state",children:(0,s.jsx)(n.code,{children:"GetModState"})})," before attempting to load files from the mods in this collection.  Alternatively, use ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#query-user-installations",children:(0,s.jsx)(n.code,{children:"QueryUserInstallations"})})," as described in ",(0,s.jsx)(n.a,{href:"#retrieving-mod-directory-paths-for-loading",children:(0,s.jsx)(n.strong,{children:"Retrieving mod directory paths for loading"})}),"."]})}),"\n",(0,s.jsxs)(a.A,{"group-id":"languages",children:[(0,s.jsx)(i.A,{value:"blueprint",label:"Blueprint",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"query_user_subscriptions",src:t(68260).A+"",width:"915",height:"357"})})}),(0,s.jsx)(i.A,{value:"c++",label:"C++",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void UModioManagerSubsystem::QueryUserSubscriptions()\n{\n   if (UModioSubsystem* Subsystem = GEngine->GetEngineSubsystem<UModioSubsystem>())\n   {\n   \tTMap<FModioModID, FModioModCollectionEntry> SubscribedMods = Subsystem->QueryUserSubscriptions();\n   \t// Do something with SubscribedMods e.g. display on a UI\n   }\n}\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"installation-management",children:"Installation management"}),"\n",(0,s.jsxs)(n.p,{children:["So a subscription marks a mod as requiring installation, and an unsubscription indicates uninstallation, but how do you actually control when the plugin ",(0,s.jsx)(n.strong,{children:"does"})," those things? After all, you don\u2019t want a mod to be uninstalled after your main program has loaded those files into memory, locking them from deletion. Likewise, you probably don\u2019t want to be using networking or processor resources during gameplay for downloading mods. To give you control over when these processes occur without forcing you to shut down the plugin, you can call ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#enablemodmanagement",children:(0,s.jsx)(n.code,{children:"EnableModManagement"})})," and ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#disable-mod-management",children:(0,s.jsx)(n.code,{children:"DisableModManagement"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To notify your users when a mod is finished installing or updating, ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#enablemodmanagement",children:(0,s.jsx)(n.code,{children:"EnableModManagement"})})," asks you to provide it with a callback. This callback will be invoked ",(0,s.jsx)(n.strong,{children:"every time"})," a ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#modiomodmanagementevent",children:(0,s.jsx)(n.code,{children:"ModioModManagementEvent"})})," occurs i.e. whenever a mod is installed, updated, uninstalled, or uploaded by the plugin\u2019s internal event loop. This behavior persists until a corresponding call to ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#disable-mod-management",children:(0,s.jsx)(n.code,{children:"DisableModManagement"})})," or ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#shutdownasync",children:(0,s.jsx)(n.code,{children:"ShutdownAsync"})})," is made."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/unreal/refdocs/#enablemodmanagement",children:(0,s.jsx)(n.code,{children:"EnableModManagement"})})," is not an async function.  It does not end with the ",(0,s.jsx)(n.code,{children:"*Async"})," suffix. Its callback operates differently to asynchronous result callbacks used elsewhere in the mod.io plugin."]})}),"\n",(0,s.jsxs)(a.A,{"group-id":"languages",children:[(0,s.jsx)(i.A,{value:"blueprint",label:"Blueprint",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"enable_mod_management",src:t(94787).A+"",width:"1109",height:"751"})})}),(0,s.jsx)(i.A,{value:"c++",label:"C++",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'void UModioManagerSubsystem::EnableModManagement()\n{\n   if (UModioSubsystem* Subsystem = GEngine->GetEngineSubsystem<UModioSubsystem>())\n   {\n   \tSubsystem->EnableModManagement(FOnModManagementDelegateFast::CreateUObject(this, &UModioManagerSubsystem::ModManagementCallback));\n   }\n}\n\nvoid UModioManagerSubsystem::ModManagementCallback(FModioModManagementEvent ModManagementEvent)\n{\n   if (ModManagementEvent.Status)\n   {\n   \t// error handling\n   }\n   switch(ModManagementEvent.Event)\n   {\n   \tcase EModioModManagementEventType::BeginInstall:\n   \tcase EModioModManagementEventType::BeginUninstall:\n   \tcase EModioModManagementEventType::BeginUpdate:\n   \tcase EModioModManagementEventType::BeginUpload:\n   \t\tUE_LOG(LogModioGame, Log, TEXT("Begin processing Mod %s"), *ModManagementEvent.ID.ToString());\n   \t\tbreak;\n   \tcase EModioModManagementEventType::Installed:\n   \t\tUE_LOG(LogModioGame, Log, TEXT("Received an Installed event for Mod %s"), *ModManagementEvent.ID.ToString());\n   \t\tbreak;\n   \tcase EModioModManagementEventType::Uninstalled: \n   \t\tUE_LOG(LogModioGame, Log, TEXT("Received an Uninstalled event for Mod %s"), *ModManagementEvent.ID.ToString());\n   \t\tbreak;\n   \tcase EModioModManagementEventType::Updated:\n   \t\tUE_LOG(LogModioGame, Log, TEXT("Received an Updated event for Mod %s"), *ModManagementEvent.ID.ToString());\n   \t\tbreak;\n   \tcase EModioModManagementEventType::Uploaded:\n   \t\tUE_LOG(LogModioGame, Log, TEXT("Received an Uploaded event for Mod %s"), *ModManagementEvent.ID.ToString());\n   \t\tbreak;\n   \tdefault:;\n   }\n}\n'})})})]}),"\n",(0,s.jsxs)(n.p,{children:["While mod management is enabled, the plugin assumes that it has the ability to make changes to the filesystem, including deleting mods that the user has no longer subscribed to. As a result you should make sure that you don\u2019t have any open handles to files inside the mod directories when you call ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#enablemodmanagement",children:(0,s.jsx)(n.code,{children:"EnableModManagement"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When you want to be able to freely open files in the mod directories, call ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#disable-mod-management",children:(0,s.jsx)(n.code,{children:"DisableModManagement"})}),". The plugin will finish the current operation but will not continue any others."]}),"\n",(0,s.jsxs)(n.p,{children:["Call ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#is-mod-management-busy",children:(0,s.jsx)(n.code,{children:"IsModManagementBusy"})})," to see if mod management is currently processing a mod."]}),"\n",(0,s.jsxs)(a.A,{"group-id":"languages",children:[(0,s.jsx)(i.A,{value:"blueprint",label:"Blueprint",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"disable_mod_management",src:t(68708).A+"",width:"1362",height:"267"})})}),(0,s.jsx)(i.A,{value:"c++",label:"C++",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void UModioManagerSubsystem::DisableModManagement()\n{\n   if (UModioSubsystem* Subsystem = GEngine->GetEngineSubsystem<UModioSubsystem>())\n   {\n   \tif (!Subsystem->IsModManagementBusy())\n   \t{\n   \t\tSubsystem->DisableModManagement();\n   \t}\n   }\n}\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"retrieving-mod-directory-paths-for-loading",children:"Retrieving mod directory paths for loading"}),"\n",(0,s.jsx)(n.p,{children:"So now we have the user picking mods and marking them for installation, we\u2019re enabling mod management at a point where we don\u2019t mind the plugin changing the filesystem, and mods are being installed by the plugin. We now need to know where they are on disk, otherwise you can\u2019t load them into your game!"}),"\n",(0,s.jsxs)(n.p,{children:["The easiest way to do this is by using ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#query-user-installations",children:(0,s.jsx)(n.code,{children:"QueryUserInstallations"})}),". This function returns a ",(0,s.jsx)(n.code,{children:"TMap"})," of ",(0,s.jsx)(n.a,{href:"/unreal/refdocs/#modiomodcollectionentry",children:(0,s.jsx)(n.code,{children:"ModioModCollectionEntry"})})," objects that can be queried for folder paths to use for loading a mod's files into your game. ",(0,s.jsx)(n.code,{children:"QueryUserInstallations"})," also allows you to specify whether or not to include outdated mods."]}),"\n",(0,s.jsxs)(a.A,{"group-id":"languages",children:[(0,s.jsx)(i.A,{value:"blueprint",label:"Blueprint",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"query_user_installations",src:t(68413).A+"",width:"1414",height:"255"})})}),(0,s.jsx)(i.A,{value:"c++",label:"C++",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void UModioManagerSubsystem::GetInstalledMods()\n{\n   if (UModioSubsystem* Subsystem = GEngine->GetEngineSubsystem<UModioSubsystem>())\n   {\n   \tTMap<FModioModID, FModioModCollectionEntry> InstalledMods = Subsystem->QueryUserInstallations(false);\n   \t\n   \t// Do something with each installed mod, ie adding paths/loading the content appropriately\n   }\n}\n"})})})]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var s=t(18215);const o={tabItem:"tabItem_Ymn6"};var a=t(74848);function i(e){let{children:n,hidden:t,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(o.tabItem,i),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>v});var s=t(96540),o=t(18215),a=t(23104),i=t(56347),r=t(205),d=t(57485),l=t(31682),c=t(70679);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:o}}=e;return{value:n,label:t,attributes:s,default:o}}))}(t);return function(e){const n=(0,l.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function b(e){let{queryString:n=!1,groupId:t}=e;const o=(0,i.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,d.aZ)(a),(0,s.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(o.location.search);n.set(a,e),o.replace({...o.location,search:n.toString()})}),[a,o])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,a=h(e),[i,d]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:a}))),[l,u]=b({queryString:t,groupId:o}),[g,p]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,a]=(0,c.Dv)(t);return[o,(0,s.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:o}),f=(()=>{const e=l??g;return m({value:e,tabValues:a})?e:null})();(0,r.A)((()=>{f&&d(f)}),[f]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),p(e)}),[u,p,a]),tabValues:a}}var p=t(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(74848);function M(e){let{className:n,block:t,selectedValue:s,selectValue:i,tabValues:r}=e;const d=[],{blockElementScrollPositionUntilNextRender:l}=(0,a.a_)(),c=e=>{const n=e.currentTarget,t=d.indexOf(n),o=r[t].value;o!==s&&(l(n),i(o))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n),children:r.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>d.push(e),onKeyDown:u,onClick:c,...a,className:(0,o.A)("tabs__item",f.tabItem,a?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function x(e){let{lazy:n,children:t,selectedValue:o}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===o));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function j(e){const n=g(e);return(0,y.jsxs)("div",{className:(0,o.A)("tabs-container",f.tabList),children:[(0,y.jsx)(M,{...n,...e}),(0,y.jsx)(x,{...n,...e})]})}function v(e){const n=(0,p.A)();return(0,y.jsx)(j,{...e,children:u(e.children)},String(n))}},89236:(e,n,t)=>{t.d(n,{A:()=>a});var s=t(19365),o=(t(96540),t(74848));function a(e){return(0,o.jsx)(o.Fragment,{children:(0,o.jsx)(s.A,{className:"tw-rounded-md",...e})})}},27064:(e,n,t)=>{t.d(n,{A:()=>a});var s=t(11470),o=(t(96540),t(74848));function a(e){return(0,o.jsx)("div",{className:"tw-border tw-border-solid tw-border-skyblue tw-rounded-md tw-bg-darkslategray tw-p-4 tw-mb-4",children:(0,o.jsx)(s.A,{...e})})}},68708:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/disable_mod_management-d0c213302f8bcbd47e29d082d2ea6533.png"},94787:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/enable_mod_management-2a568b166cf68067c04f8ff543731857.png"},34796:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/fetch_external_updates-c214d37570186f79da44f59e70ff5763.png"},68413:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/query_user_installations-e37a6093723adc512887869302e45c29.png"},68260:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/query_user_subscriptions-985bf7a66a5aa502410ed36bc4d06b55.png"},84272:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/subscribe_to_mod-1867343f1ca55106c395c6a52cd45208.png"},66738:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/unsubscribe_from_mod-b2486db7a4aa665ec2bd5741b89cc04b.png"},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(96540);const o={},a=s.createContext(o);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);