"use strict";(self.webpackChunkmodio_docs=self.webpackChunkmodio_docs||[]).push([[6699],{23990:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var o=n(74848),i=n(28453);const r={id:"ue-meta-configuration",title:"Meta Quest Configuration",slug:"/unreal/meta-configuration/",custom_edit_url:"https://github.com/modio/modio-ue4-internal/blob/develop/Plugins/Modio/Doc/doc_root/en-us/meta/meta-configuration.mdx"},s=void 0,a={id:"meta/ue-meta-configuration",title:"Meta Quest Configuration",description:"Configuration",source:"@site/public/en-us/meta/meta-configuration.mdx",sourceDirName:"meta",slug:"/unreal/meta-configuration/",permalink:"/unreal/meta-configuration/",draft:!1,unlisted:!1,editUrl:"https://github.com/modio/modio-ue4-internal/blob/develop/Plugins/Modio/Doc/doc_root/en-us/meta/meta-configuration.mdx",tags:[],version:"current",frontMatter:{id:"ue-meta-configuration",title:"Meta Quest Configuration",slug:"/unreal/meta-configuration/",custom_edit_url:"https://github.com/modio/modio-ue4-internal/blob/develop/Plugins/Modio/Doc/doc_root/en-us/meta/meta-configuration.mdx"},sidebar:"sidebar",previous:{title:"Android Configuration",permalink:"/unreal/android-configuration/"},next:{title:"Unreal Plugin API Reference",permalink:"/unreal/refdocs/"}},c={},l=[{value:"Configuration",id:"configuration",level:3},{value:"Authentication",id:"authentication",level:3}];function u(t){const e={a:"a",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h3,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(e.p,{children:"To access Meta Quest-specific APIs, including authentication, you need to download and integrate the Meta Platform SDK into your Unreal Engine project. Follow these steps:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Download the Meta Platform SDK Plugin"}),":"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Visit the ",(0,o.jsx)(e.a,{href:"https://developers.meta.com/horizon/downloads/package/unreal-5-platform-sdk-plugin/",children:"Meta Unreal Engine 5 Platform SDK"})," and download the plugin."]}),"\n",(0,o.jsxs)(e.li,{children:["Extract the plugin into your project's ",(0,o.jsx)(e.code,{children:"Plugins"})," directory."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Enable the Plugin"}),":"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Open your Unreal Engine project."}),"\n",(0,o.jsxs)(e.li,{children:["Navigate to ",(0,o.jsx)(e.code,{children:"Edit > Plugins"})," and enable the ",(0,o.jsx)(e.strong,{children:"Meta XR Platform"})," plugin."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"This plugin provides access to Meta Quest-specific functionality, such as achievements, leaderboards, authentication, and so on."}),"\n",(0,o.jsx)(e.h3,{id:"authentication",children:"Authentication"}),"\n",(0,o.jsx)(e.p,{children:"Once the plugin is installed and the platform SDK is integrated, you can use the following steps to authenticate users via Meta Quest. The authentication process involves obtaining an access token, retrieving a user proof, and also obtaining the user ID. After that, you can pass all of this information to mod.io for authentication."}),"\n",(0,o.jsx)(e.p,{children:"Here's how to implement Meta Quest authentication with mod.io:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-cpp",children:'// Fetching the Meta Quest Access Token\nOvrPlatform_User_GetAccessToken(UGameplayStatics::GetGameInstance(GetWorld()), OvrPlatform_User_GetAccessToken_Delegate::CreateWeakLambda(this, [this](bool bSuccess, FStringPtr AccessTokenResponseStringPtr, FString ErrorString)\n{\n\tif (!bSuccess)\n\t{\n\t\tUE_LOG(LogTemp, Error, TEXT("Failed to get access token, error: %s"), *ErrorString);\n\t\treturn;\n\t}\n\tconst FString AccessTokenResponseString = AccessTokenResponseStringPtr.ToSharedRef().Get();\n\n\t// Fetching User Proof\n\tOvrPlatform_User_GetUserProof(UGameplayStatics::GetGameInstance(GetWorld()), OvrPlatform_User_GetUserProof_Delegate::CreateWeakLambda(this, [this, AccessTokenResponseString](bool bSuccess, FOvrUserProofPtr UserProofResponseStringPtr, FString ErrorString)\n\t{\n\t\tif (!bSuccess)\n\t\t{\n\t\t\tUE_LOG(LogTemp, Error, TEXT("Failed to get user proof, error: %s"), *ErrorString);\n\t\t\treturn;\n\t\t}\n\n\t\tconst FString NonceString = UserProofResponseStringPtr.ToSharedRef().Get().Nonce;\n\n\t\t// Fetching User ID\n\t\tconst FString UserIdString = FString::FromInt(UOvrFunctionsBlueprintLibrary::Platform_GetLoggedInUserID());\n\n\t\t// Authenticating with mod.io\n\t\tFModioAuthenticationParams AuthParams;\n\t\tAuthParams.AuthToken = AccessTokenResponseString;\n\t\tAuthParams.UserEmail = TEXT("example@gmail.com");\n\t\tAuthParams.ExtendedParameters.Add("device", "quest"); // Can also be "rift"\n\t\tAuthParams.ExtendedParameters.Add("nonce", NonceString);\n\t\tAuthParams.ExtendedParameters.Add("user_id", UserIdString);\n\n\t\tif (UModioSubsystem* ModioSubsystem = GEngine->GetEngineSubsystem<UModioSubsystem>())\n\t\t{\n\t\t\tModioSubsystem->AuthenticateUserExternalAsync(AuthParams, EModioAuthenticationProvider::Oculus, FOnErrorOnlyDelegateFast::CreateUObject(this, &UModioUGCSubsystem::OnAuthenticationComplete));\n\t\t}\n\t}));\n}));\n'})})]})}function d(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(u,{...t})}):u(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>a});var o=n(96540);const i={},r=o.createContext(i);function s(t){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:s(t.components),o.createElement(r.Provider,{value:e},t.children)}}}]);