"use strict";(self.webpackChunkmodio_docs=self.webpackChunkmodio_docs||[]).push([[6699],{23990:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=n(74848),r=n(28453);const a={id:"ue-meta-configuration",title:"Meta Quest Configuration",slug:"/unreal/meta-configuration/",custom_edit_url:"https://github.com/modio/modio-ue4-internal/blob/develop/Plugins/Modio/Doc/doc_root/en-us/meta/meta-configuration.mdx"},i=void 0,o={id:"meta/ue-meta-configuration",title:"Meta Quest Configuration",description:"Configuration",source:"@site/public/en-us/meta/meta-configuration.mdx",sourceDirName:"meta",slug:"/unreal/meta-configuration/",permalink:"/unreal/meta-configuration/",draft:!1,unlisted:!1,editUrl:"https://github.com/modio/modio-ue4-internal/blob/develop/Plugins/Modio/Doc/doc_root/en-us/meta/meta-configuration.mdx",tags:[],version:"current",frontMatter:{id:"ue-meta-configuration",title:"Meta Quest Configuration",slug:"/unreal/meta-configuration/",custom_edit_url:"https://github.com/modio/modio-ue4-internal/blob/develop/Plugins/Modio/Doc/doc_root/en-us/meta/meta-configuration.mdx"},sidebar:"sidebar",previous:{title:"Android Configuration",permalink:"/unreal/android-configuration/"},next:{title:"Unreal Plugin API Reference",permalink:"/unreal/refdocs/"}},c={},l=[{value:"Configuration",id:"configuration",level:3},{value:"Authentication",id:"authentication",level:3},{value:"C++",id:"c",level:4},{value:"Blueprint",id:"blueprint",level:4}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(t.p,{children:"To access Meta Quest-specific APIs, including authentication, you need to download and integrate the MetaXR and MetaXR Platform plugins into your Unreal Engine project. Follow these steps:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Download the MetaXR Plugin"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Visit the ",(0,s.jsx)(t.a,{href:"https://developers.meta.com/horizon/downloads/package/unreal-engine-5-integration/",children:"Meta Unreal Engine 5 Integration"})," and download the plugin."]}),"\n",(0,s.jsxs)(t.li,{children:["Extract the plugin into your project's ",(0,s.jsx)(t.code,{children:"Plugins"})," directory."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Download the Meta Platform SDK Plugin"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Visit the ",(0,s.jsx)(t.a,{href:"https://developers.meta.com/horizon/downloads/package/unreal-5-platform-sdk-plugin/",children:"Meta Unreal Engine 5 Platform SDK"})," and download the plugin."]}),"\n",(0,s.jsxs)(t.li,{children:["Extract the plugin into your project's ",(0,s.jsx)(t.code,{children:"Plugins"})," directory."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Enable the Plugins"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Open your Unreal Engine project."}),"\n",(0,s.jsxs)(t.li,{children:["Navigate to ",(0,s.jsx)(t.code,{children:"Edit > Plugins"})," and ensure both ",(0,s.jsx)(t.strong,{children:"MetaXR"})," (under Installed/Virtual Reality) and ",(0,s.jsx)(t.strong,{children:"MetaXR Platform"})," (under Installed/Online Platform) plugins are enabled."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Add Supported Devices"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Navigate to ",(0,s.jsx)(t.code,{children:"Edit > Project Settings"})]}),"\n",(0,s.jsxs)(t.li,{children:["Navigate to ",(0,s.jsx)(t.code,{children:"Plugins > Meta XR"})]}),"\n",(0,s.jsxs)(t.li,{children:["Under ",(0,s.jsx)(t.code,{children:"Mobile > Supported Meta Quest Device"}),", add ",(0,s.jsx)(t.code,{children:"Meta Quest 3"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"File > Save All"}),", restart the Unreal Editor"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"These plugins provide access to Meta Quest-specific functionality, such as achievements, leaderboards, authentication, and so on."}),"\n",(0,s.jsx)(t.h3,{id:"authentication",children:"Authentication"}),"\n",(0,s.jsxs)(t.p,{children:["Before Meta authentication with Modio can work, you must create an app on the ",(0,s.jsx)(t.a,{href:"https://developers.meta.com/horizon/",children:"Meta Horizon Dashboard"})," and link it to an app on the mod.io dashboard. ",(0,s.jsx)(t.a,{href:"/platforms/meta/authentication",children:"Instructions on how to do this are here"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Once the apps are set up, add the following to ",(0,s.jsx)(t.code,{children:"DefaultEngine.ini"}),", replacing ",(0,s.jsx)(t.code,{children:"YOUR_META_APP_ID"})," with your Meta App Id from the Meta Horizon Dashboard:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"[OnlineSubsystemOculus]\nMobileAppId=YOUR_META_APP_ID\n"})}),"\n",(0,s.jsx)(t.p,{children:"You can now authenticate users via Meta. The authentication process involves obtaining an access token, retrieving a user proof, and also obtaining the user ID. After that, you can pass all of this information to mod.io for authentication."}),"\n",(0,s.jsx)(t.p,{children:"Authentication can be implemented via C++ or Blueprint."}),"\n",(0,s.jsx)(t.h4,{id:"c",children:"C++"}),"\n",(0,s.jsxs)(t.p,{children:["First, you must ensure that your game has a valid ",(0,s.jsx)(t.code,{children:"UGameInstance"}),", as the MetaXR Platform does not initialize until the game instance has initialized."]}),"\n",(0,s.jsxs)(t.p,{children:["Once the game instance has  initialized, retrieve the ",(0,s.jsx)(t.code,{children:"UOvrPlatformSubsystem"})," from it and start the message pump:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:'auto ovrSubsystem = GameInstance->GetSubsystem<UOvrPlatformSubsystem>();\n\n// Check that it\'s valid\nif (ovrSubsystem == nullptr)\n{\n\tUE_LOG(Error, TEXT("Failed to get OvrPlatformSubsystem."));\n\treturn;\n}\n\n// Start the message pump\novrSubsystem->StartMessagePump();\n'})}),"\n",(0,s.jsx)(t.p,{children:"The next step is to perform the entitlement check:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:'// Create a delegate\nOvrPlatform_Entitlement_GetIsViewerEntitled_Delegate EntitlementDelegate =\n\tOvrPlatform_Entitlement_GetIsViewerEntitled_Delegate::CreateUObject(this, &ThisClass::OnIsViewerEntitled);\n\n// Make the platform call. This is async so we pass the delegate to it. Could also use a lambda\nOvrPlatform_Entitlement_GetIsViewerEntitled(GameInstance, MoveTemp(EntitlementDelegate));\n\n// The callback\nvoid UMyClass::OnIsViewerEntitled(bool isEntitled, FString errorMessage)\n{\n\tif (isEntitled)\n\t{\n\t\t// Continue with next auth steps...\n\t}\n\telse\n\t{\n\t\tUE_LOG(Error, TEXT("Entitlement check failed: %s."), *errorMessage);\n\t}\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Once the entitlement check is done, you can now make the three async calls to retrieve the User Id, User Proof (nonce), and Access Token."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"// Get the logged in User Id from OVR\nOvrPlatform_User_GetLoggedInUser_Delegate LoggedInUserDelegate = \n\tOvrPlatform_User_GetLoggedInUser_Delegate::CreateUObject(this, &ThisClass::OnGetLoggedInUser);\nOvrPlatform_User_GetLoggedInUser(GameInstance, MoveTemp(LoggedInUserDelegate));\n\n// Get the nonce from OVR\nOvrPlatform_User_GetUserProof_Delegate UserProofDelegate = \n\tOvrPlatform_User_GetUserProof_Delegate::CreateUObject(this, &ThisClass::OnGetUserProof);\nOvrPlatform_User_GetUserProof(GameInstance, MoveTemp(UserProofDelegate));\n\n// Get access token from OVR\nOvrPlatform_User_GetAccessToken_Delegate AccessTokenDelegate = \n\tOvrPlatform_User_GetAccessToken_Delegate::CreateUObject(this, &ThisClass::OnGetAccessToken);\nOvrPlatform_User_GetAccessToken(GameInstance, MoveTemp(AccessTokenDelegate));\n"})}),"\n",(0,s.jsx)(t.p,{children:"In each of the delegate callbacks, store the data. Again, you could use lambdas instead of delegates if you want."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:'void UMyClass::OnGetLoggedInUser(bool success, FOvrUserPtr user, FString errorMessage)\n{\n\t// Check that we successfully got a logged in user\n\tif (!success || !user.IsValid())\n\t{\n\t\tUE_LOG(Error, TEXT("Failed to get the logged in user: %s"), *errorMessage);\n\t\treturn;\n\t}\n\n\t// Use this function to convert the FOvrId to an FString\n\tFString userIdStr = UOvrPlatformUtilsLibrary::Conv_OvrIdToString(user->ID);\n}\n\nvoid UMyClass::OnGetUserProof(bool success, FOvrUserProofPtr userProof, FString errorMessage)\n{\n\t// Check that we successfully got a nonce\n\tif (!success || !userProof.IsValid())\n\t{\n\t\tUE_LOG(Error, TEXT("Failed to get user proof: %s"), *errorMessage);\n\t\treturn;\n\t}\n\n\tFString userNonce = userProof->Nonce;\n}\n\nvoid UMyClass::OnGetAccessToken(bool success, FStringPtr accessToken, FString errorMessage)\n{\n\t// Check that we successfully got an access token\n\tif (!success || !accessToken.IsValid())\n\t{\n\t\tUE_LOG(Error, TEXT("Failed to get access token: %s"), *errorMessage);\n\t\treturn;\n\t}\n\n\tFString userAccessToken = *accessToken;\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Once you have all three required bits of information, you can authenticate with Modio:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:'FModioAuthenticationParams AuthParams;\nAuthParams.AuthToken = userAccessToken;\nAuthParams.bUserHasAcceptedTerms = false; // true if the user has accepted\nAuthParams.ExtendedParameters.Add(TEXT("device"), TEXT("quest"));\nAuthParams.ExtendedParameters.Add(TEXT("nonce"), userNonce);\nAuthParams.ExtendedParameters.Add(TEXT("user_id"), userIdStr);\n\nModioSubsystem->AuthenticateUserExternalAsync(\n\tAuthParams, EModioAuthenticationProvider::Oculus,\n\tFOnErrorOnlyDelegateFast::CreateUObject(this, &ThisClass::OnAuthenticationComplete));\n'})}),"\n",(0,s.jsx)(t.h4,{id:"blueprint",children:"Blueprint"}),"\n",(0,s.jsxs)(t.p,{children:["To implement Meta authentication in Blueprint, open the blueprint for your Game Instance. Create a custom event called ",(0,s.jsx)(t.code,{children:"OvrPlatformSubsystemStarted"}),"."]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Note:"})," The event name must be exactly ",(0,s.jsx)(t.code,{children:"OvrPlatformSubsystemStarted"})," and within the Game Instance blueprint."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["On the event, create a boolean variable called ",(0,s.jsx)(t.code,{children:"OvrPlatformReady"}),". You can check this to see if the MetaXR Platform initialized successfully."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Meta Auth Custom Event",src:n(72654).A+"",width:"970",height:"413"})}),"\n",(0,s.jsx)(t.p,{children:"Next, start the message pump."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Meta Auth Message Pump",src:n(62868).A+"",width:"830",height:"505"})}),"\n",(0,s.jsx)(t.p,{children:"Next, perform the entitlement check. This is an async function, so you will need to handle both the Success and Failure callbacks."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Meta Auth Entitlement Check",src:n(12032).A+"",width:"933",height:"499"})}),"\n",(0,s.jsxs)(t.p,{children:["From the Success callback, call ",(0,s.jsx)(t.code,{children:"Platform Get Logged in User ID"})," and store the return value in a variable."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Meta Auth User ID",src:n(87027).A+"",width:"912",height:"466"})}),"\n",(0,s.jsxs)(t.p,{children:["Now call ",(0,s.jsx)(t.code,{children:"User Get User Proof"})," to get the nonce, which is another async function. Right click on ",(0,s.jsx)(t.code,{children:"User Proof"})," and split the struct, then store the resulting string in a variable. Remember to handle the Failure callback."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Meta Auth User Proof",src:n(70736).A+"",width:"808",height:"487"})}),"\n",(0,s.jsxs)(t.p,{children:["Using the main execution pin, call ",(0,s.jsx)(t.code,{children:"User Get Access Token"}),". This is another async function and can be called in parallel with getting the user nonce, so you don't need to call this from a callback. Handle the Failure callback and set the access token to a variable in the Success callback."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Meta Auth Access Token",src:n(82990).A+"",width:"875",height:"678"})}),"\n",(0,s.jsx)(t.p,{children:"Next, you need to check if all three required variables are ready. Because the calls to get the nonce and access token are both async, they could finish in any order, so you need to do the check after both of these calls."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Meta Auth Check Variables",src:n(40476).A+"",width:"992",height:"802"})}),"\n",(0,s.jsxs)(t.p,{children:["Finally, we can send the request to ",(0,s.jsx)(t.code,{children:"AuthenticateUserExternalAsync"}),". Ensure that all the parameters are set as per the screenshot below. Remember to change the Provider to ",(0,s.jsx)(t.code,{children:"Oculus"}),". The ",(0,s.jsx)(t.code,{children:"Extended Parameters"})," map must contain:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"device"}),": ",(0,s.jsx)(t.code,{children:"quest"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"user_id"}),": ",(0,s.jsx)(t.em,{children:"User Id variable"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"nonce"}),": ",(0,s.jsx)(t.em,{children:"Nonce variable"})]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Meta Auth SSO",src:n(44549).A+"",width:"1166",height:"647"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},82990:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/access_token-b9611ad4d3c3065c0b751da08b74e6b2.png"},44549:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/authenticate-35673d3b38a7af6d9ced5e0cfbadf158.png"},40476:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/checking_variables-40adce5331873dabcc3dc20b87badc74.png"},72654:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/custom_event-c962cd76c836f06047114585316325ff.png"},12032:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/entitlement_check-c9bccccc75c1babe8dc166149fc6e868.png"},62868:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/message_pump-1d75099f8e87232abc652e6ea9cb89c5.png"},87027:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/user_id-90e59a0ee978639843d4edefe91f898d.png"},70736:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/user_proof-ec7eaa12f98fbbe15c818842a00030bb.png"},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(96540);const r={},a=s.createContext(r);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);