// Copyright Blackbird Interactive. All rights reserved.

#include "ModioUpdateStaticLocDataCommandlet.h"

#if WITH_EDITOR
	#include "AssetRegistry/AssetRegistryModule.h"
	#include "Internationalization/StringTable.h"
	#include "Internationalization/StringTableCore.h"
	#include "FileHelpers.h"
	#include "Loc/ModioEnumLocalizationHelpers.h"
	#include "ModioErrorCondition.h"
	#include "ModioSettings.h"
	#include "Types/ModioFilterParams.h"
	#include "Types/ModioModCollectionEntry.h"
	#include "Types/ModioModManagementEvent.h"
	#include "Types/ModioModProgressInfo.h"
	#include "Types/ModioReportParams.h"
#endif

#include UE_INLINE_GENERATED_CPP_BY_NAME(ModioUpdateStaticLocDataCommandlet)

#if WITH_EDITOR

DEFINE_LOG_CATEGORY_STATIC(LogModioUpdateStaticLocDataCommandlet, All, All);

UModioUpdateStaticLocDataCommandlet::UModioUpdateStaticLocDataCommandlet()
{
	IsClient = false;
	IsEditor = true;
	IsServer = false;
	LogToConsole = true;

	HelpDescription = TEXT("Commandlet updating static localization data for the mod.io plugin.");
}

int UModioUpdateStaticLocDataCommandlet::Main(const FString& Params)
{
	// Parse command line
	TArray<FString> Tokens;
	TArray<FString> Switches;
	TMap<FString, FString> ParamVals;
	UCommandlet::ParseCommandLine(*Params, Tokens, Switches, ParamVals);
	if (const UModioSettings* PluginSettings = GetDefault<UModioSettings>())
	{
		if (UObject* MaybeStringTable = PluginSettings->LocalizationStringTable.TryLoad())
		{
			UStringTable* StringTableObject = Cast<UStringTable>(MaybeStringTable);
			if (!StringTableObject)
			{
				UE_LOG(LogModioUpdateStaticLocDataCommandlet, Display,
					   TEXT("Could not resolve string table for static localization data. Is "
							"UModioSettings::LocalizationStringTable configured correctly?"));
				return -1;
			}
			FStringTableRef StaticLocDataTable = StringTableObject->GetMutableStringTable();

			ModioUI::RegisterEnumAsLocalizable<EModioReportType>(StaticLocDataTable);
			ModioUI::RegisterEnumAsLocalizable<EModioSortFieldType>(StaticLocDataTable);
			ModioUI::RegisterEnumAsLocalizable<EModioSortDirection>(StaticLocDataTable);
			ModioUI::RegisterEnumAsLocalizable<EModioModProgressState>(StaticLocDataTable);
			ModioUI::RegisterEnumAsLocalizable<EModioModState>(StaticLocDataTable);
			ModioUI::RegisterEnumAsLocalizable<EModioModManagementEventType>(StaticLocDataTable);
			ModioUI::RegisterEnumAsLocalizable<EFileSizeUnit>(StaticLocDataTable);

			// Localize Error Conditions so they can be displayed to end-users in the UI
			// Error conditions are code-generated by the SDK so they need manual display string overrides

			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::NoError, "No Error");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::NetworkError, "Network Error");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::ConfigurationError, "Configuration Error");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::InvalidArgsError, "Invalid Parameter");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::FilesystemError, "Filesystem Error");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::InternalError, "Internal SDK Error");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::ApiErrorRefSuccess, "No Error");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::EntityNotFoundError, "Item not found");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::UserTermsOfUseError, "Terms of Use not accepted");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::SubmitReportError, "Report submission error");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::UserNotAuthenticatedError, "Authentication failure");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::SDKNotInitialized, "SDK not initialized");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::UserAlreadyAuthenticatedError, "Already authenticated");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::SystemError, "System Error");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::OperationCanceled, "Operation canceled");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::ModManagementDisabled, "Mod management disabled");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::RateLimited, "Rate limit exceeded");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::ModBeingProcessed, "Mod is being processed");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::InsufficientSpace, "Insufficient storage space");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::SDKAlreadyInitialized, "SDK already initialized");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::ModManagementAlreadyEnabled, "Mod management already enabled");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::InsufficientPermissions, "Insufficient permissions");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::EmailLoginCodeInvalid, "Invalid email login code");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::AlreadySubscribed, "Already subscribed to mod");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::InstallOrUpdateCancelled, "Mod install/update canceled");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::UploadCancelled, "Mod upload canceled");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::TempModSetNotInitialized, "Temporary mod set not initialized");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::MonetizationOperationError, "Monetization operation failed");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::PaymentTransactionFailed, "Payment transaction failed");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::IncorrectPrice, "Incorrect mod price");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::ItemAlreadyOwned, "Item already owned");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::ParentalControlRestrictions, "Parental controls blocked");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::MetricsSessionNotInitialized, "Metrics session not initialized");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::MetricsSessionAlreadyInitialized, "Metrics session already initialized");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::MetricsSessionIsActive, "Metrics session active");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::MetricsSessionIsNotActive, "Metrics session not started");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::MetricsSessionHasNoMods, "No mods in metrics session");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::PremiumFeatureNotAvailable, "Premium feature unavailable");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::EmailExchangeCodeAlreadyRedeemed, "Email code already redeemed");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::ModDependenciesNotAllowed, "Mod dependencies not allowed");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::ModCannotAddDependencyMonetized, "Cannot add dependency to monetized mod");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::ModIsDependency, "Mod is currently a dependency");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::ModCannotAllowDependencyMonetized, "Cannot allow dependencies for monetized mod");
			ModioUI::RegisterCustomEnumValueLocalization(StaticLocDataTable, EModioErrorCondition::ModCannotDeleteDependency, "Cannot delete mod with dependencies");

			if (UEditorLoadingAndSavingUtils::SavePackages({StringTableObject->GetPackage()},
														   false))
			{
				UE_LOG(LogModioUpdateStaticLocDataCommandlet, Display,
					   TEXT("String table updated successfully with static localization data."));
			}
		}
	}
	return 0;
}

#endif
